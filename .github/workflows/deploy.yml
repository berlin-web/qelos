name: Deploy with Helm

on:
  workflow_run:
    workflows: ["Docker Release"]
    types:
      - completed
    branches: [ main ]
  # Add manual trigger capability
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      namespace:
        description: 'Kubernetes namespace to deploy to'
        required: false
        default: 'default'
        type: string

jobs:
  # Check if required secrets exist before proceeding
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      secrets-exist: ${{ steps.check-secrets.outputs.defined }}
    steps:
      - name: Check if secrets exist
        id: check-secrets
        run: |
          # Use environment variables to check existence without exposing values
          if [ "$HELM_VALUES_EXISTS" = "true" ] && ([ "$KUBE_CONFIG_EXISTS" = "true" ] || [ "$DO_TOKEN_EXISTS" = "true" ]); then
            echo "defined=true" >> $GITHUB_OUTPUT
          else
            echo "defined=false" >> $GITHUB_OUTPUT
            echo "::error::Required secrets are not set. You need HELM_VALUES_YAML and either KUBE_CONFIG or DIGITALOCEAN_ACCESS_TOKEN."
          fi
        # Prevent command output from being displayed in logs
        shell: bash {0}
        env:
          # Use empty env vars to check existence without exposing values
          KUBE_CONFIG_EXISTS: ${{ secrets.KUBE_CONFIG != '' && secrets.KUBE_CONFIG != null }}
          DO_TOKEN_EXISTS: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN != '' && secrets.DIGITALOCEAN_ACCESS_TOKEN != null }}
          HELM_VALUES_EXISTS: ${{ secrets.HELM_VALUES_YAML != '' && secrets.HELM_VALUES_YAML != null }}

  deploy:
    needs: check-secrets
    # Only run if secrets exist and (workflow was successful or manually triggered)
    if: |
      needs.check-secrets.outputs.secrets-exist == 'true' && 
      (github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    # Set environment to enable protection rules if needed
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Install doctl
        if: secrets.DIGITALOCEAN_ACCESS_TOKEN != ''
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Set up kubeconfig
        env:
          DO_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DO_CLUSTER_ID: ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}
          KUBE_CONFIG_EXISTS: ${{ secrets.KUBE_CONFIG != '' && secrets.KUBE_CONFIG != null }}
        run: |
          set +x  # Disable command echoing
          umask 077  # Set strict permissions
          mkdir -p $HOME/.kube
          
          # Check if we have DigitalOcean credentials
          if [ -n "$DO_TOKEN" ] && [ -n "$DO_CLUSTER_ID" ]; then
            echo "Using DigitalOcean credentials to access Kubernetes cluster"
            # Redirect any potential error output to prevent leaking sensitive info
            doctl kubernetes cluster kubeconfig save "$DO_CLUSTER_ID" 2>/dev/null
            if [ $? -ne 0 ]; then
              echo "::error::Failed to get kubeconfig from DigitalOcean"
              exit 1
            fi
          # Otherwise use provided kubeconfig
          elif [ -n "$KUBE_CONFIG_EXISTS" ]; then
            echo "Using provided kubeconfig"
            # Try to decode if it's base64, otherwise use as-is
            # Process in memory without echoing to pipes when possible
            # Store KUBE_CONFIG in a variable to check content
            KUBE_CONFIG="${{ secrets.KUBE_CONFIG }}"
            if [[ "$KUBE_CONFIG" == *"apiVersion:"* ]]; then
              # Plain text config
              cat > $HOME/.kube/config << "EOF"
              $KUBE_CONFIG
              EOF
            else
              # Likely base64 encoded
              # Use heredoc to avoid exposing in process list or pipes
              cat > $HOME/.kube/config.b64 << "EOF"
              $KUBE_CONFIG
              EOF
              base64 -d $HOME/.kube/config.b64 > $HOME/.kube/config 2>/dev/null || cat $HOME/.kube/config.b64 > $HOME/.kube/config
              rm -f $HOME/.kube/config.b64
            fi
          fi
          
          # Ensure config exists before setting permissions
          if [ -f "$HOME/.kube/config" ]; then
            chmod 600 $HOME/.kube/config
          else
            echo "::error::Failed to create kubeconfig file"
            exit 1
          fi
        # Prevent command output from being displayed in logs
        shell: bash {0}
          
      - name: Create values.yaml from secret
        run: |
          set +x  # Disable command echoing
          umask 077  # Set strict permissions
          # Use heredoc to avoid exposing in process list
          HELM_VALUES="${{ secrets.HELM_VALUES_YAML }}"
          cat > ./helm/qelos/values.yaml << "EOF"
          $HELM_VALUES
          EOF
          chmod 600 ./helm/qelos/values.yaml
          # Verify file was created successfully
          if [ ! -s "./helm/qelos/values.yaml" ]; then
            echo "::error::Failed to create values.yaml file"
            exit 1
          fi
        # Prevent command output from being displayed in logs
        shell: bash {0}
          
      - name: Deploy with Helm
        run: |
          set +x  # Disable command echoing
          # Verify kubeconfig and values.yaml exist before deployment
          if [ ! -f "$HOME/.kube/config" ] || [ ! -s "./helm/qelos/values.yaml" ]; then
            echo "::error::Missing required configuration files"
            exit 1
          fi
          
          # Sanitize namespace input
          NAMESPACE="${{ github.event.inputs.namespace || 'default' }}"
          NAMESPACE="${NAMESPACE//[^a-zA-Z0-9-]/-}"
          
          helm upgrade --install qelos ./helm/qelos \
            --namespace "$NAMESPACE" \
            --create-namespace \
            --atomic \
            --timeout 10m \
            --debug=false \
            --history-max 10
          
          # Don't show detailed error output that might contain secrets
          if [ $? -ne 0 ]; then
            echo "::error::Helm deployment failed"
            exit 1
          fi
        # Prevent command output from being displayed in logs
        shell: bash {0}
